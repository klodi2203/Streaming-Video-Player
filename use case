Η εργασία αφορά την υλοποίηση και την παρουσίαση συστήματος για την επεξεργασία
και μετάδοση ροών βίντεο (streaming video) με χρήση του μοντέλου Client-Server.
Το σύστημα προς υλοποίηση αποτελείται από 2 βασικές οντότητες (εφαρμογές):
• Streaming Server: αποτελεί την εφαρμογή που είναι υπεύθυνη για την διαχείριση
μιας λίστας με τα διαθέσιμα αρχεία που μπορούν να μεταδοθούν, για την μετατροπή
του αρχικού αρχείου σε ένα σύνολο από αρχεία με διαφορετικό format και
διαφορετικές αναλύσεις, για την επικοινωνία με τον πελάτη (Client), καθώς και για
τη μετάδοση των αρχείων στον πελάτη (Client). Θα υλοποιηθεί σε Java.
• Streaming Client: αποτελεί την εφαρμογή που εκτελείται στην πλευρά του τελικού
χρήστη και είναι υπεύθυνη για την επικοινωνία με τον Server και την λήψη και
αναπαραγωγή του video στον τελικό χρήστη. Θα υλοποιηθεί σε Java.
Προκειμένου να γίνουν κατανοητές οι απαιτούμενες λειτουργίες περιγράφεται παρακάτω το
σενάριο χρήσης και οι τεχνολογίες που θα χρησιμοποιηθούν.
Σενάριο Χρήσης και Τεχνολογίες
Αρχικά, στην πλευρά του Streaming Server και στον φάκελο “videos” στο e-class υπάρχουν
τα αρχικά αρχεία προς μετάδοση. Π.χ., όπως φαίνονται παρακάτω:
 Forrest_Gump-720p.mkv
 Forrest_Gump-480p.mkv
 The_Godfather-480p.mp4
 The_Shawshank_Redemption-1080p.mp4
Υποστηρίζονται 3 formats (.avi, .mp4, .mkv) και 5 αναλύσεις (240p, 360p, 480p, 720p,
1080p).
Αρχικά, ξεκινάει η εκτέλεση της εφαρμογής Streaming Server. Η εφαρμογή εξετάζει τον
κατάλογο “videos” και για κάθε όνομα ταινίας που βρίσκει, εξετάζει αν υπάρχουν όλα τα
διαθέσιμα formats και αναλύσεις (π.χ. στο παράδειγμά μας από το Forrest_Gump λείπουν τα
format .avi και .mp4 και οι αναλύσεις 240p, 360p, επομένως λείπουν 4x2+2=10 αρχεία). Για
κάθε αρχείο δημιουργεί τα κατάλληλα αρχεία που λείπουν, ώστε κάθε ταινία να έχει μια
πλήρη λίστα από formats και αναλύσεις. Επομένως στην συγκεκριμένη περίπτωση του
Forrest_Gump θα δημιουργηθούν και θα αποθηκευτούν στον φάκελο “videos” συνολικά 10
νέα αρχεία, τα παρακάτω:
 Forrest_Gump-240p.mp4
 Forrest_Gump-360p.mp4
 Forrest_Gump-480p.mp4
 Forrest_Gump-720p.mp4
 Forrest_Gump-240p.avi
 Forrest_Gump-360p.avi
 Forrest_Gump-480p.avi
 Forrest_Gump-720p.avi
 Forrest_Gump-240p.mkv
 Forrest_Gump-360p.mkv
Σελίδα 4 από 6
 Forrest_Gump-480p.mkv (υπάρχει, δεν δημιουργείται νέο)
 Forrest_Gump-720p.mkv (υπάρχει, δεν δημιουργείται νέο)
Για κάθε ταινία δεν είναι δυνατή η δημιουργία μεγαλύτερης ανάλυσης από αυτή που υπάρχει
π.χ. στο Forrest_Gump δεν μπορεί να δημιουργηθεί ανάλυση 1080p.
Για να υλοποιηθεί το παραπάνω θα χρησιμοποιηθεί το FFMPEG και επίσης ο κατάλληλος
wrapper, είτε ο FFMPEG Wrapper σε Java, είτε Jave2, είτε Jaffree.
Στη συνέχεια, ο Streaming Server δημιουργεί μια λίστα με όλα τα διαθέσιμα αρχεία,
αποθηκεύοντας κατάλληλα για κάθε έκδοση το όνομα (π.χ. Forrest_Gump), το format (π.χ.
mkv) και την ανάλυση (π.χ. 720p) (π.χ. στην περίπτωσή μας 12 αρχεία για το Forrest_Gump,
9 αρχεία για το The_Godfather και 15 αρχεία για το The_Shawshank_Redemption). Στην
συνέχεια περιμένει για πελάτες (clients).
Προκειμένου να γίνει απλή η υλοποίηση θεωρούμε ότι ο Server συνδέεται με ένα μόνο Client
κάθε χρονική στιγμή. H υλοποίηση της επικοινωνίας μεταξύ Client και Server πρέπει να
γίνει με χρήση Java Sockets.
Στη συνέχεια από την πλευρά του πελάτη ξεκινάει η εκτέλεση της εφαρμογής Streaming
Client. Μόλις ξεκινήσει η εφαρμογή πρέπει να εκτιμήσει την ταχύτητα της σύνδεσης
(downlink) του υπολογιστή που βρίσκεται ο πελάτης (π.χ. 4Mbps). Για τον σκοπό αυτό εκτελεί
ένα download test 5 δευτερολέπτων. Για να υλοποιηθεί το παραπάνω θα χρησιμοποιηθεί η
βιβλιοθήκη της Java JSpeedTest (https://github.com/bertrandmartel/speed-test-lib) ή όποια
άλλη βιβλιοθήκη επιλέξετε.
Στη συνέχεια, ρωτάει από τον χρήστη να επιλέξει το format που επιθυμεί (π.χ. .mkv). O
Streaming Client επικοινωνεί με τον Streaming Server και του στέλνει τις πληροφορίες αυτές
(download_connection_speed, format). O Streaming Server ελέγχει τα διαθέσιμα αρχεία και
δημιουργεί μια λίστα μόνο με τα αρχεία που είναι κατάλληλα για τον πελάτη με την βοήθεια
του πίνακα που φαίνεται παρακάτω (Youtube resolutions and bitrates).
Επομένως, αν το speed test δείξει αποτέλεσμα 2.1 Mbps και ο πελάτης επιλέξει .mkv στο
συγκεκριμένο παράδειγμα o Streaming Server θα του στείλει την παρακάτω λίστα (επειδή με
bitrate 2.1 Mbps μπορεί να υποστηρίξει μέχρι και ανάλυση 480p σύμφωνα με τον παραπάνω
πίνακα).
 Forrest_Gump-240p.mkv
 Forrest_Gump-360p.mkv
 Forrest_Gump-480p.mkv
 The_Godfather-240p.mkv
 The_Godfather-360p.mkv
 The_Godfather-480p.mkv
 The_Shawshank_Redemption-240p.mkv
 The_Shawshank_Redemption-360p.mkv
Σελίδα 5 από 6
 The_Shawshank_Redemption-480p.mkv
O Streaming Client λαμβάνει την παραπάνω λίστα και την παρουσιάζει στον τελικό χρήστη.
Ο τελικός χρήστης επιλέγει το αρχείο που επιθυμεί (π.χ.: The_Godfather-480p.mkv).
Στην συνέχεια o Streaming Client ρωτάει τον χρήστη να επιλέξει και τον επιθυμητό τρόπο
μετάδοσης (π.χ. UDP). Πρέπει να υποστηρίζονται 3 πρωτόκολλα μετάδοσης: UDP, TCP,
RTP/UDP. Σε περίπτωση που ο χρήστης δεν επιλέξει τρόπο μετάδοσης, ο Streaming Client
επιλέγει αυτόματα έναν με βάση τους παρακάτω κανόνες:
 240p -> TCP
 360p, 480p -> UDP
 720p, 1080p -> RTP/UDP
O Streaming Client επικοινωνεί με τον Streaming Server και του στέλνει τις πληροφορίες
αυτές (file_name, protocol).
O Streaming Server ξεκινάει την μετάδοση με κατάλληλη χρήση του FFMPEG (ως Video
Server) και ειδοποιεί τον Streaming Client, ώστε και αυτός να ξεκινήσει την λήψη με
κατάλληλη χρήση του FFMPEG (ως Video Client). Για να υλοποιηθούν τα παραπάνω θα
χρησιμοποιηθεί η κλάση της Java ProcessBuilder.
Οι δύο εφαρμογές πρέπει να διαθέτουν κατάλληλο σύστημα logging (με χρήση Logger) και
το κατάλληλο Graphical User Interface (GUI). Η υλοποίηση του GUI μπορεί να γίνει είτε με
Java AWT, είτε με Java Swings, είτε με Java FX.
